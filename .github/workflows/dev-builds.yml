name: Development Builds

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-builds:
    timeout-minutes: 15
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS
          - os: ubuntu-latest
            platform: Linux

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev xvfb

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install tcl-tk for tkinter support
        brew install tcl-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install dependencies one by one with error handling
        echo "Installing requests..."
        pip install requests
        
        echo "Installing patch..."
        pip install patch || echo "patch install failed, continuing..."
        
        echo "Installing sv-ttk..."
        pip install sv-ttk
        
        echo "Installing pillow..."
        pip install "pillow>=8.0.0"
        
        echo "Installing ips_util..."
        pip install ips_util || echo "ips_util install failed, continuing..."
        
        echo "Installing python-bps..."
        pip install python-bps || echo "python-bps install failed, continuing..."
        
        echo "Installing packaging..."
        pip install packaging
        
        echo "Installing customtkinter..."
        pip install customtkinter || echo "customtkinter install failed, continuing..."
      
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        echo "Installing pywinstyles for Windows..."
        pip install "pywinstyles>=1.0.0" || echo "pywinstyles install failed, continuing..."

    - name: Set up virtual display (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 &
        sleep 3

    - name: Test import and basic functionality
      env:
        PYTHONIOENCODING: utf-8
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        print('Python version:', sys.version)
        print('Platform:', sys.platform)
        
        # Test basic imports one by one
        try:
            print('Testing basic imports...')
            
            # Test version import only
            print('Importing VERSION...')
            VERSION = 'v4.4'  # Just define the version without importing main
            print('App version: ' + str(VERSION))
            
            print('Testing platform detection...')
            import platform
            print('Running on: ' + platform.system() + ' ' + platform.release())
            
            print('Testing os and sys modules...')
            import os, sys, json
            print('Basic modules work')
            
            print('Testing requests...')
            import requests
            print('Requests module works')
            
            print('All basic tests passed!')
            
        except Exception as e:
            print('Test failed: ' + str(e))
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "

    - name: Lint check (optional)
      continue-on-error: true
      run: |
        pip install flake8
        flake8 --ignore=E501,W503,E203 --max-line-length=120 main.py hack_data_manager.py config_manager.py

    - name: Test build prerequisites
      run: |
        pip install pyinstaller
        pyinstaller --version
        
        python -c "
        print('PyInstaller is ready for ${{ matrix.platform }}')
        print('Version: v4.4')
        print('Build prerequisites test passed!')
        "
