name: Development Builds

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-builds:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: Windows
          - os: macos-latest
            platform: macOS
          - os: ubuntu-latest
            platform: Linux

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev xvfb

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install tcl-tk for tkinter support
        brew install tcl-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test import and basic functionality
      env:
        PYTHONIOENCODING: utf-8
      run: |
        # Set up virtual display for Linux
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 3
        fi
        
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        try:
            # Test version import
            from main import VERSION
            print('App version: ' + str(VERSION))
            
            # Test core non-GUI imports
            from config_manager import ConfigManager
            config = ConfigManager()
            print('Config manager works')
            
            # Test utilities
            from utils import safe_filename, title_case
            test_filename = safe_filename('Test: File Name')
            print('Utilities work: ' + str(test_filename))
            
            # Test API components
            from api_pipeline import DIFFICULTY_LOOKUP
            print('API pipeline imports successfully')
            
            # Test patch handler
            from patch_handler import PatchHandler
            print('Patch handler imports successfully')
            
            # Test platform detection
            import platform
            print('Running on: ' + platform.system() + ' ' + platform.release())
            
            print('All core functionality tests passed!')
        except Exception as e:
            print('Test failed: ' + str(e))
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "

    - name: Lint check (optional)
      continue-on-error: true
      run: |
        pip install flake8
        flake8 --ignore=E501,W503,E203 --max-line-length=120 main.py hack_data_manager.py config_manager.py

    - name: Test build prerequisites
      run: |
        pip install pyinstaller
        pyinstaller --version
        
        # Test that main.py can be analyzed by PyInstaller
        python -c "
        import PyInstaller.utils.hooks
        print('PyInstaller is ready for ${{ matrix.platform }}')
        
        # Only test the version constant, not GUI components
        import sys
        sys.path.append('.')
        from main import VERSION
        print('Version: ' + str(VERSION))
        "
