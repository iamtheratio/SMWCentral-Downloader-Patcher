name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v4.3.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"

jobs:
  create-github-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}
          
          ðŸŽ® **Multi-platform ROM hack downloader and patcher for Super Mario World Central**
          
          ### Platform Support:
          - âœ… **Windows 10/11** (x64)
          - âœ… **macOS** (Universal: Intel + Apple Silicon)  
          - âœ… **Linux** (x64)
          
          ### Installation Instructions:
          
          **Windows:**
          1. Download `SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Windows-x64.zip`
          2. Extract the ZIP file
          3. Run `SMWC Downloader.exe`
          4. If Windows Defender flags it, add an exclusion (see README)
          
          **macOS:**
          1. Download `SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-macOS-Universal.dmg`
          2. Mount the DMG file
          3. Drag the app to your Applications folder
          4. Right-click â†’ Open (first time only to bypass Gatekeeper)
          
          **Linux:**
          1. Download `SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Linux-x64.tar.gz`
          2. Extract: `tar -xzf SMWC-Downloader-*.tar.gz`
          3. Run: `./smwc-downloader`
          4. May need to install `python3-tk` on some distributions
          
          ### What's New in ${{ steps.get_version.outputs.VERSION }}:
          - Enhanced cross-platform compatibility
          - Improved UI responsiveness and scrolling
          - Better error handling and stability
          - Threading cleanup improvements
          - Windows Defender false positive mitigations
          
          ### System Requirements:
          - **Windows**: Windows 10 (1903+) or Windows 11
          - **macOS**: macOS 10.15+ (Catalina or newer)
          - **Linux**: Modern distribution with GTK support
          
          > **Security Note**: These executables may trigger antivirus warnings due to PyInstaller packaging. This is a common false positive. See the README for exclusion instructions.
        draft: false
        prerelease: false

  build-and-upload:
    needs: create-github-release
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: Windows
            spec: "SMWC Downloader.spec"
            artifact_name: "SMWC-Downloader-${{ needs.create-github-release.outputs.version }}-Windows-x64.zip"
            asset_content_type: "application/zip"
          - os: macos-latest
            platform: macOS
            spec: "SMWC Downloader macOS.spec"
            artifact_name: "SMWC-Downloader-${{ needs.create-github-release.outputs.version }}-macOS-Universal.dmg"
            asset_content_type: "application/x-apple-diskimage"
          - os: ubuntu-latest
            platform: Linux
            spec: "SMWC Downloader Linux.spec"
            artifact_name: "SMWC-Downloader-${{ needs.create-github-release.outputs.version }}-Linux-x64.tar.gz"
            asset_content_type: "application/gzip"

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create platform-specific PyInstaller spec (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cat > "SMWC Downloader macOS.spec" << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[('assets', 'assets'), ('ui', 'ui')],
            hiddenimports=['tkinter.filedialog', 'tkinter.messagebox'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
            optimize=0,
        )
        pyz = PYZ(a.pure)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='SMWC Downloader',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch='universal2',
            codesign_identity=None,
            entitlements_file=None,
            icon='assets/icon.ico',
        )

        app = BUNDLE(
            exe,
            name='SMWC Downloader.app',
            icon='assets/icon.ico',
            bundle_identifier='com.iamtheratio.smwc-downloader',
            version='${{ needs.create-github-release.outputs.version }}',
            info_plist={
                'CFBundleName': 'SMWC Downloader',
                'CFBundleDisplayName': 'SMWC Downloader & Patcher',
                'CFBundleShortVersionString': '${{ needs.create-github-release.outputs.version }}',
                'CFBundleVersion': '${{ needs.create-github-release.outputs.version }}',
                'NSHighResolutionCapable': True,
                'NSRequiresAquaSystemAppearance': False,
            }
        )
        EOF

    - name: Create platform-specific PyInstaller spec (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cat > "SMWC Downloader Linux.spec" << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[('assets', 'assets'), ('ui', 'ui')],
            hiddenimports=['tkinter.filedialog', 'tkinter.messagebox'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
            optimize=0,
        )
        pyz = PYZ(a.pure)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='smwc-downloader',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

    - name: Build executable
      run: |
        pyinstaller "${{ matrix.spec }}" --clean --noconfirm

    - name: Create Windows package
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path "dist\*" -DestinationPath "${{ matrix.artifact_name }}"

    - name: Create macOS package
      if: matrix.os == 'macos-latest'
      run: |
        # Create DMG
        mkdir -p dmg_contents
        cp -R "dist/SMWC Downloader.app" dmg_contents/
        ln -s /Applications dmg_contents/Applications
        
        hdiutil create -volname "SMWC Downloader ${{ needs.create-github-release.outputs.version }}" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "${{ matrix.artifact_name }}"

    - name: Create Linux package
      if: matrix.os == 'ubuntu-latest'
      run: |
        tar -czf "${{ matrix.artifact_name }}" -C dist smwc-downloader

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-github-release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact_name }}
        asset_name: ${{ matrix.artifact_name }}
        asset_content_type: ${{ matrix.asset_content_type }}
