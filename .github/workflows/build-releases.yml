name: Build Multi-Platform Releases

on:
  push:
    branches: [ main, develop, feature/MacOS-Implementation ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  APP_NAME: "SMWC Downloader"
  PYTHON_VERSION: "3.11"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Get version from main.py
      id: get_version
      run: |
        $version = python -c "import sys; sys.path.append('.'); from main import VERSION; print(VERSION)"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "App version: $version"

    - name: Build Windows executable
      run: |
        pyinstaller "SMWC Downloader.spec" --clean --noconfirm
        pyinstaller "SMWC Updater.spec" --clean --noconfirm
        
    - name: Create Windows archive
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $archiveName = "SMWC-Downloader-$version-Windows-x64.zip"
        
        # Create a temporary directory for packaging
        New-Item -ItemType Directory -Path package -Force
        New-Item -ItemType Directory -Path package\updater -Force
        Copy-Item "dist\SMWC Downloader.exe" -Destination package\
        Copy-Item "dist\SMWC Updater.exe" -Destination package\updater\
        Copy-Item "config.json" -Destination package\
        Copy-Item "README.md" -Destination package\
        
        # Create archive
        Compress-Archive -Path "package\*" -DestinationPath $archiveName
        echo "WINDOWS_ARCHIVE=$archiveName" >> $env:GITHUB_OUTPUT
      id: create_windows_archive

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: ${{ steps.create_windows_archive.outputs.WINDOWS_ARCHIVE }}
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Get version from main.py
      id: get_version
      run: |
        VERSION=$(python -c "import sys; sys.path.append('.'); from main import VERSION; print(VERSION)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "App version: $VERSION"

    - name: Build macOS application
      run: |
        pyinstaller "SMWC Downloader macOS.spec" --clean --noconfirm
        pyinstaller "SMWC Updater macOS.spec" --clean --noconfirm

    - name: Sign macOS app (if certificates available)
      if: ${{ env.APPLE_CERTIFICATE_BASE64 != '' }}
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # This is optional - only runs if you have signing certificates
        echo "Signing certificates detected, signing app..."
        # Add signing logic here if needed

    - name: Create macOS DMG
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        DMG_NAME="SMWC-Downloader-$VERSION-macOS-Universal.dmg"
        
        # Create a temporary directory for DMG contents
        mkdir -p dmg_contents/updater
        cp -R "dist/SMWC Downloader.app" dmg_contents/
        cp -R "dist/SMWC Updater.app" dmg_contents/updater/
        cp config.json dmg_contents/
        cp README.md dmg_contents/
        
        # Create symbolic link to Applications
        ln -s /Applications dmg_contents/Applications
        
        # Create DMG
        hdiutil create -volname "SMWC Downloader $VERSION" \
          -srcfolder dmg_contents \
          -ov -format UDZO \
          "$DMG_NAME"
        
        echo "MACOS_DMG=$DMG_NAME" >> $GITHUB_OUTPUT
      id: create_macos_dmg

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: ${{ steps.create_macos_dmg.outputs.MACOS_DMG }}
        retention-days: 30

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Get version from main.py
      id: get_version
      run: |
        VERSION=$(python -c "import sys; sys.path.append('.'); from main import VERSION; print(VERSION)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "App version: $VERSION"

    - name: Create Linux PyInstaller spec
      run: |
        cat > "SMWC Downloader Linux.spec" << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['main.py'],
            pathex=[],
            binaries=[],
            datas=[('assets', 'assets'), ('ui', 'ui')],
            hiddenimports=['tkinter.filedialog', 'tkinter.messagebox'],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
            optimize=0,
        )
        pyz = PYZ(a.pure)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='smwc-downloader',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

    - name: Build Linux executable
      run: |
        pyinstaller "SMWC Downloader Linux.spec" --clean --noconfirm
        
        # Create updater spec for Linux
        cat > "SMWC Updater Linux.spec" << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-

        a = Analysis(
            ['standalone_updater.py'],
            pathex=[],
            binaries=[],
            datas=[],
            hiddenimports=[],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            noarchive=False,
            optimize=0,
        )
        pyz = PYZ(a.pure)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.datas,
            [],
            name='smwc-updater',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=False,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        
        pyinstaller "SMWC Updater Linux.spec" --clean --noconfirm

    - name: Create Linux archive
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        ARCHIVE_NAME="SMWC-Downloader-$VERSION-Linux-x64.tar.gz"
        
        # Create a temporary directory for packaging
        mkdir -p package/updater
        cp dist/smwc-downloader package/
        cp dist/smwc-updater package/updater/
        cp config.json package/
        cp README.md package/
        
        # Create archive
        tar -czf "$ARCHIVE_NAME" -C package .
        
        echo "LINUX_ARCHIVE=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
      id: create_linux_archive

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: ${{ steps.create_linux_archive.outputs.LINUX_ARCHIVE }}
        retention-days: 30

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        VERSION=$(python -c "import sys; sys.path.append('.'); from main import VERSION; print(VERSION)")
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}
          
          🎮 **Multi-platform ROM hack downloader and patcher for Super Mario World Central**
          
          ### Downloads:
          - **Windows**: Compatible with Windows 10/11
          - **macOS**: Universal binary for Intel and Apple Silicon
          - **Linux**: x64 executable for most distributions
          
          ### Installation:
          - **Windows**: Extract and run `SMWC Downloader.exe`
          - **macOS**: Mount DMG and drag app to Applications folder
          - **Linux**: Extract and run `./smwc-downloader`
          
          ### What's New:
          - Cross-platform compatibility improvements
          - Enhanced UI responsiveness
          - Better error handling and stability
          
          > **Note**: You may need to add antivirus exclusions for the executable files.
        draft: false
        prerelease: false

    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-build/SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Windows-x64.zip
        asset_name: SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Windows-x64.zip
        asset_content_type: application/zip

    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macos-build/SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-macOS-Universal.dmg
        asset_name: SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-macOS-Universal.dmg
        asset_content_type: application/x-apple-diskimage

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-build/SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Linux-x64.tar.gz
        asset_name: SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Linux-x64.tar.gz
        asset_content_type: application/gzip
