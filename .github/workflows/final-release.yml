name: Final Release

permissions:
  contents: write
  actions: read

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v4.4.0)'
        required: true
        type: string
env:
  PYTHON_VERSION: "3.11"
jobs:
  promote-to-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get version and tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG=${GITHUB_REF#refs/tags/}
        fi
        VERSION=$(echo $TAG | sed 's/^v//')
        echo "TAG=$TAG" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Final release version: $VERSION"
    # Check if a pre-release already exists for this version
    - name: Find existing pre-release
      id: find_prerelease
      run: |
        # Use v prefix for pre-release tag (e.g., v4.4-pre)
        PRE_TAG="v${{ steps.get_version.outputs.VERSION }}-pre"
        echo "Looking for pre-release tag: $PRE_TAG"
        # Check if pre-release exists
        PRERELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$PRE_TAG" \
          | jq -r '.id // "null"')
        echo "PRERELEASE_ID=$PRERELEASE_ID" >> $GITHUB_OUTPUT
        echo "PRE_TAG=$PRE_TAG" >> $GITHUB_OUTPUT
        echo "Pre-release ID: $PRERELEASE_ID"
    # Extract changelog for current version from README
    - name: Extract changelog
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Extract the changelog section for current version from README.md
        # Look for "### v4.4.0" pattern and extract until next "### v" or end
        CHANGELOG=$(awk "/### v${VERSION}\.0/{flag=1; next} /### v[0-9]/{flag=0} flag" README.md)
        # If no changelog found, create a generic one
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Latest release with improvements and bug fixes"
        fi
        # Format the changelog for release notes
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "### What's New in $VERSION:" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "Extracted changelog:"
        echo "$CHANGELOG"
    # If pre-release exists, promote it to final release
    - name: Promote pre-release to final release
      if: steps.find_prerelease.outputs.PRERELEASE_ID != 'null'
      run: |
        echo "Promoting pre-release ${{ steps.find_prerelease.outputs.PRE_TAG }} to final release ${{ steps.get_version.outputs.TAG }}"
        
        # Use GitHub CLI to update the release (avoids JSON escaping issues)
        gh release edit "${{ steps.find_prerelease.outputs.PRE_TAG }}" \
          --tag "${{ steps.get_version.outputs.TAG }}" \
          --title "SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}" \
          --notes "## SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}

        🎮 **Multi-platform ROM hack downloader and patcher for Super Mario World Central**

        ### Platform Support:
        - ✅ **Windows 10/11** (x64)  
        - ✅ **macOS** (Universal: Intel + Apple Silicon)
        - ✅ **Linux** (x64)

        ${{ steps.changelog.outputs.CHANGELOG }}

        ### Installation Instructions:

        **Windows:**
        1. Download \`SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Windows-x64.zip\`
        2. Extract the ZIP file
        3. Run \`SMWC Downloader.exe\`

        **macOS:**
        1. Download \`SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-macOS-Universal.dmg\`
        2. Mount the DMG file and drag to Applications folder
        3. Right-click → Open (first time only to bypass Gatekeeper)

        **Linux:**
        1. Download \`SMWC-Downloader-${{ steps.get_version.outputs.VERSION }}-Linux-x64.tar.gz\`
        2. Extract and run the installer or binary

        > **Security Note**: These executables may trigger antivirus warnings due to PyInstaller packaging. This is a common false positive." \
          --draft=false \
          --prerelease=false
        
        echo "✅ Promoted pre-release to final release"
    # If no pre-release exists, create a new final release (fallback)
    - name: Create new final release
      if: steps.find_prerelease.outputs.PRERELEASE_ID == 'null'
      run: |
        echo "⚠️ No pre-release found for version ${{ steps.get_version.outputs.VERSION }}"
        echo "Creating new final release with README changelog..."
        
        # Use GitHub CLI instead of curl to avoid JSON escaping issues
        gh release create "${{ steps.get_version.outputs.TAG }}" \
          --title "SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}" \
          --notes "## SMWC Downloader & Patcher ${{ steps.get_version.outputs.VERSION }}

        🎮 **Multi-platform ROM hack downloader and patcher for Super Mario World Central**

        ⚠️ **Note**: This release was created without a pre-release stage. Please ensure all builds are tested.

        ### Platform Support:
        - ✅ **Windows 10/11** (x64)
        - ✅ **macOS** (Universal: Intel + Apple Silicon)
        - ✅ **Linux** (x64)

        ${{ steps.changelog.outputs.CHANGELOG }}

        ### Installation Instructions:
        Please download the appropriate package for your platform and follow the installation guide in the README.

        > **Note**: If you see this message, consider using the pre-release workflow for better testing." \
          --draft=false \
          --prerelease=false
        
        echo "✅ Created new final release with README changelog"
